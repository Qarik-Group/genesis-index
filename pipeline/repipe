#!/bin/bash


PIPELINE=$(cd $(dirname ${BASH_SOURCE[0]}) ; pwd)

GENESIS_INDEX=${GENESIS_INDEX:-https://genesis.starkandwayne.com}
GENESIS_INDEX=${GENESIS_INDEX%%/}

pushd $PIPELINE >/dev/null
	rm -rf releases stemcells
	mkdir releases stemcells

	for release in $(curl -Lsk ${GENESIS_INDEX}/v1/release | jq -r .[]); do
		disabled=$(curl -Lsk ${GENESIS_INDEX}/v1/release/${release}/metadata | jq -r .disabled)
		if [[ ${disabled} == "true" ]]; then
			echo skipping $release
			# https://www.youtube.com/watch?v=dDZzl9AyXeg
			continue
		fi
		echo processing $release

		url=$(curl -Lsk ${GENESIS_INDEX}/v1/release/${release}/metadata | jq -r .url)
		if echo $url | egrep -q "^https?://bosh.io/"; then
			shopt -s extglob
			repo=${url#http?(s)://bosh.io/d/github.com/}
			shopt -u extglob
			repo=${repo%?v=*}
			cat >releases/${release}.yml <<EOF # {{{
---
# auto-generated by pipeline/repipe script

groups:
  - name: releases
    jobs:
      - (( append ))
      - ${release}

resources:
  - name: ${release}
    type: bosh-io-release
    source:
      repository: ${repo}

jobs:
  - name: ${release}
    public: true
    serial: false
    plan:
      - get: ${release}
        trigger: true
      - get: version-check-script

      - task: update-index
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: starkandwayne/concourse
          inputs:
            - name: ${release}
              path: release
            - name: version-check-script
              path: run
          run:
            path: ./run/check-version
            args: []
          params:
            GENESIS_INDEX: (( grab meta.genesis.index ))
            GENESIS_CREDS: (( concat meta.genesis.username ":" meta.genesis.password ))
            CHECK_TYPE:    release
            SUBJECT:       ${release}
EOF
# }}}

		elif echo $url | grep -q "^https://github.com/"; then
			user=${url#https://github.com/}
			user=${user%%/*}

			repo=${url#https://github.com/${user}/}
			repo=${repo%%/*}
			cat >releases/${release}.yml <<EOF # {{{
---
# auto-generated by pipeline/repipe script

groups:
  - name: releases
    jobs:
      - (( append ))
      - ${release}

resources:
  - name: ${release}
    type: github-release
    source:
      user: ${user}
      repository: ${repo}
      access_token: (( grab meta.github.access_token ))

jobs:
  - name: ${release}
    public: true
    serial: false
    plan:
      - get: ${release}
        trigger: true
      - get: version-check-script

      - task: update-index
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: starkandwayne/concourse
          inputs:
            - name: ${release}
              path: release
            - name: version-check-script
              path: run
          run:
            path: ./run/check-version
            args: []
          params:
            GENESIS_INDEX: (( grab meta.genesis.index ))
            GENESIS_CREDS: (( concat meta.genesis.username ":" meta.genesis.password ))
            CHECK_TYPE:    release
            SUBJECT:       ${release}
EOF
# }}}
		fi
	done

	for stemcell in $(curl -Lsk ${GENESIS_INDEX}/v1/stemcell | jq -r .[]); do
		cat >stemcells/${stemcell}.yml <<EOF # {{{
---
# auto-generated by pipeline/repipe script

groups:
  - name: stemcells
    jobs:
      - (( append ))
      - ${stemcell}

resources:
  - name: ${stemcell}
    type: bosh-io-stemcell
    source:
      name: ${stemcell}

jobs:
  - name: ${stemcell}
    public: true
    serial: false
    plan:
      - get: ${stemcell}
        trigger: true
      - get: version-check-script

      - task: update-index
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: starkandwayne/concourse
          inputs:
            - name: ${stemcell}
              path: stemcell
            - name: version-check-script
              path: run
          run:
            path: ./run/check-version
            args: []
          params:
            GENESIS_INDEX: (( grab meta.genesis.index ))
            GENESIS_CREDS: (( concat meta.genesis.username ":" meta.genesis.password ))
            CHECK_TYPE:    stemcell
            SUBJECT:       ${stemcell}
EOF
# }}}
	done

	trap "rm -f ${PIPELINE}/.deploy.yml" INT QUIT TERM EXIT
	           spruce merge base.yml releases/*.yml stemcells/*.yml > .deploy.yml  &&
	REDACT=yes spruce merge base.yml releases/*.yml stemcells/*.yml > pipeline.yml &&
	fly --target sw set-pipeline --pipeline genesis-index --config .deploy.yml     &&
	fly --target sw unpause-pipeline --pipeline genesis-index
	rm -rf releases stemcells
popd >/dev/null

echo
echo DONE
